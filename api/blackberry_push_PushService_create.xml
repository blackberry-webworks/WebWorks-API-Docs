<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//IXIA//DTD IXIA DITA Composite//EN" "../../system/dtd/ixia/IxiaDitabase.dtd">
<reference id="blackberry_push_PushService_create" xml:lang="en-us">
    <title><apiname>create()</apiname></title>
    <shortdesc><i>Creates a PushService object. The PushService object will only be available if the successCallback function is called. It will not be available if the failCallback function is called instead.</i></shortdesc>
    <refbody>
        <section>
            <title>Synopsis:</title>
                <pre scale="80">void PushService.create(options, successCallback, failCallback, simChangeCallback, pushTransportReadyCallback)</pre>
        </section>
        <section>
            <title>Parameters:</title>
            <dl>
                <dlentry>
                    <dt><varname>Options</varname> {Object}</dt>
                    <dd><p>Object literal that allows the user to specify various options.</p>
                        <dl>
                            <dlentry>
                                <dt><varname>invokeTargetID</varname> {String}</dt>
                                <dd><p>Your application's unique invoke target ID, as set in your config.xml, related to when a new push notification is received and the application needs to be invoked.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>appID</varname> {String}</dt>
                                <dd><p>The provider application ID. If writing a consumer application, this corresponds to the application ID you received after registering to use the public/BIS PPG push service. If writing an enterprise application, you have the choice of not specifying appId (in which case a unique one will be generated for you under the covers) or specifying a unique value of your choosing (this second option is useful if you plan to subscribe with the Push Initiator in your application).</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>ppgURL</varname> {String}</dt>
                                <dd><p>The PPG URL to register with. If writing a consumer application, you will be provided with this URL after registering to use the public/BIS PPG push service. The URL will point to either the eval or the production environment (for eval, http://cp{cpid}.pushapi.eval.blackberry.com; for production, http://cp{cpid}.pushapi.na.blackberry.com where {cpid} is replaced with your content provider ID). If writing an enterprise application, no ppgUrl value should be specified.</p></dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt><varname>successCallback</varname> {Function}</dt>
                    <dd><p>The callback that is invoked when the create operation is successful</p>
                        <dl>
                            <dlentry>
                                <dt><varname>pushService</varname> {PushService}</dt>
                                <dd><p>The <code>PushService</code> object that can be used on a successful <code>create</code> operation.</p></dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt><varname>failCallback</varname> {Function}</dt>
                    <dd><p>The callback that is invoked when the <code>create</code> operation has failed.</p>
                        <dl>
                            <dlentry>
                                <dt><varname>result</varname> {Number}</dt>
                                <dd><p>The reason for the failure. See the constants provided to see what result codes apply for this operation.</p></dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt><varname>simChangeCallback</varname> {Function}</dt>
                    <dd><p>The callback that is invoked when a SIM card change has occurred. This callback only applies on a successful create. When a SIM card change occurs, the channel will automatically be destroyed since this scenario may indicate the possibility of a new user using the device. Care should be taken by the application to handle this situation as well. For example, the application may wish to re-authenticate the user with the Push Initiator (if your Push Initiator implementation supports subscription) and then re-create the channel using <code>createChannel</code>.</p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>pushTransportReadyCallback</varname> {Function}</dt>
                    <dd><p>The callback that is invoked after a create channel or destroy operation has failed with a result error code of either <code>PUSH_TRANSPORT_UNAVAILABLE</code> or <code>PPG_SERVER_ERROR</code> and the network/push transport/PPG is now available again. </p>
                        <dl>
                            <dlentry>
                                <dt><varname>lastFailedOperation</varname></dt>
                                <dd><p>The last operation that was performed that failed with a result error code of either PUSH_TRANSPORT_UNAVAILABLE or PPG_SERVER_ERROR. It should be one of CREATE_CHANNEL_OPERATION or DESTROY_CHANNEL_OPERATION. Use this value to determine which operation should be tried again.</p></dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
            </dl>
        </section>
        <section>
            <title>Throws:</title>
            <pre scale="80">{String}</pre>
            <p>An exception is thrown if create is called more than once with different values for options.invokeTargetId and/or options.appId.</p>
        </section>
        <example>
            <title>Example:</title>
            <p><pre scale="80">
&lt;script type="text/javascript"&gt;

    // For a consumer application (using the public/BIS PPG)
    var ops = { invokeTargetId : 'com.sample.pushtest.target',
                appId : 'appId1',
                ppgUrl : 'http://cp123.pushapi.na.blackberry.com' };

    // For an enterprise application (using the enterprise/BES PPG)
    // var ops = { invokeTargetId : 'com.sample.pushtest.target' };

    // Or, for an enterprise application with an application ID:
    // var ops = { invokeTargetId : 'com.sample.pushtest.target',
    //             appId : 'appId1' };

    try {
        blackberry.push.PushService.create(ops,
            successCallback,
            failCallback,
            simChangeCallback,
            pushTransportReadyCallback);
    } catch (err) {
        console.log("Create was called more than once with different "
            + "values for options.invokeTargetId or options.appId.");
        console.log(err);
    }

    function successCallback(pushService) {
        // The create operation was a success
        // Save the pushService object to a global variable
        // Now, use the pushService object to now perform a
        // launchApplicationOnPush, createChannel, destroyChannel, etc.
        pushService.createChannel(createChannelCallback);
    }

    function failCallback(result) {
        // The create operation failed
        // You should compare the result code against the error
        // constants in this PushService class that apply for
        // create and take the recommended action for that constant
        if (result === blackberry.push.PushService.INTERNAL_ERROR) {
            // Retry the create up to a certain number of attempts
            // and then display an error to the user
        }
        // ... handle the other possible error constants
        // from the PushService class
    }

    function simChangeCallback() {
        // The SIM card was changed and the channel has been
        // destroyed since a new user might be using the device.
        // It is recommended that the user of this application be
        // re-authenticated with the Push Initiator (if your
        // Push Initiator implementation supports subscription)
        // followed by a call to createChannel.
    }

    function pushTransportReadyCallback(lastFailedOperation) {
        // This callback will be called when a create channel
        // or destroy channel was previously attempted and it
        // failed with a PUSH_TRANSPORT_UNAVAILABLE or a
          // PPG_SERVER_ERROR error code and now the
        // network/push transport/PPG is available again.
        // The operation indicated by lastFailedOperation should
        // be retried again.
        if (lastFailedOperation ===
            blackberry.push.PushService.CREATE_CHANNEL_OPERATION) {
            pushService.createChannel(createChannelCallback);
        } else if (lastFailedOperation ===
           blackberry.push.PushService.DESTROY_CHANNEL_OPERATION) {
           pushService.destroyChannel(destroyChannelCallback);
        }
    }

&lt;/script&gt;
            </pre></p>
        </example>
    </refbody>
</reference>
