<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//IXIA//DTD IXIA DITA Composite//EN" "../../system/dtd/ixia/IxiaDitabase.dtd">
<reference id="blackberry_user_identity_getProperties" xml:lang="en-us">
    <title><apiname>getProperties()</apiname></title>
    <shortdesc><i>Issue a request for a property.</i></shortdesc>
    <refbody>
        <section>
            <title>Synopsis:</title>
            <pre scale="80">getToken(provider, type, propertyList, successCallback, successCallback.result, failureCallback, failureCallback.result)</pre>
        </section>
        <section>
            <title>Arguments:</title>
            <dl>
                <dlentry>
                    <dt><varname>provider</varname> {String}</dt>
                    <dd><p>The identity provider to send this request to.</p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>type</varname> {int}</dt>
                    <dd><p>The type of properties contained in the @c propertyList parameter. Each provider may have a unique set of types that it is able to handle.  See the documentation for the provider for details on valid values.</p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>propertyList</varname> {String}</dt>
                    <dd><p>A comma separated string listing each of the properties requested</p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>successCallback</varname> {Function}</dt>
                    <dd><p>Function which is invoked upon successful operation of this method.</p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>successCallback.tokenResult</varname> {JSON object}</dt>
                    <dd><p>A JSON object containing the in the form below:
                    <pre>{
                            {"uri":"urn:bbid:firstname":"value":"john"},
                            {"uri":"urn:bbid:lastname":"value":"doe"}
                        }
                    </pre></p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>failureCallback</varname> {Function}</dt>
                    <dd><p>Function which is invoked when this method fails. This callback contains an errorCode parameter to specify the failure condition.</p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>failureCallback.result</varname> {JSON object}</dt>
                    <dd><p>A JSON object containing details of the failure in the form below:
                        <pre>{
                            "result":"50004",
                            "errorDescription":"The user could not be authenticated."
                        * }</pre></p></dd>
                    <dt>Error Handling:</dt>
                    <dd><p>Requests that do not complete successfully will result in the failure callback being called with one of the following result codes:</p>
                    <p><ul>
                        <li>IDS_DEFAULT_ERROR: An internal error has occurred attempting to process the request.</li>
                        <li>IDS_NOT_ENOUGH_RESOURCES: There are not enough resources available to process the request.</li>
                        <li>IDS_ACCOUNT_LOCALLY_LOCKED_OUT: The account is currently locked, token access is unavailable while locked.</li>
                        <li>IDS_USER_COULD_NOT_BE_AUTHENTICATED: The user could not be authenticated.</li>
                        <li>IDS_TOO_MANY_NAMES_PASSED: Too many properties were requested. See IDS_MAX_PROPERTY_COUNT.</li>
                        <li>IDS_NAME_TOO_LONG: The length of a property name in the list exceeds the maximum name length IDS_MAX_PROPERTY_NAME_LEN.</li>
                        <li>IDS_PROPERTY_NOT_AUTHORIZED: The application does not have access to one of the requested properties.</li>
                        <li>IDS_PROPERTY_DOES_NOT_EXIST: Property does not exist.</li>
                        <li>IDS_BAD_PROPERTY_NAME: Invalid property name.</li>
                        <li>IDS_NULL_OR_UNKNOWN_PARAMETERS: Null or invalid parameter.</li>
                        <li>IDS_NON_EXISTING_PROPERTY: Property does not exist.</li>
                        <li>IDS_PROFILE_SERVER_ERROR: Server error.</li>
                        <li>IDS_PROPERTY_VALUE_TOO_LARGE: Property value is too large.</li>
                        <li>IDS_GET_FAIL: Get failed.</li>
                    </ul></p></dd>
                </dlentry>
            </dl>
        </section>
        <example>
            <title>Example:</title>
            <p><pre scale="80">
            &lt;script type="text/javascript"&gt;
            function getPropertiesSuccess(properties) {
                alert("Get properties returned the following user properties:");
                for( prop in properties ) {
                        alert("Property: " + properties[prop].uri + " value: " + properties[prop].value);
                }
            }

            function getPropertiesFailure(result) {
                alert("Failed to retrieve user properties: " + result.result + " details: " + result.failureInfo);
            }

            blackberry.user.identity.registerProvider("ids:rim:bbid");
            blackberry.user.identity.getProperties("ids:rim:bbid", 0, "urn:bbid:firstname,urn:bbid:lastname", getPropertiesSuccess, getPropertiesFailure);
            &lt;/script&gt;
            </pre></p>
        </example>
    </refbody>
</reference>
