<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference PUBLIC "-//IXIA//DTD IXIA DITA Composite//EN" "../../system/dtd/ixia/IxiaDitabase.dtd">
<reference id="blackberry_NotificationObj" xml:lang="en-us">
    <title><apiname>Notification</apiname></title>
    <shortdesc><i>The Notification object.</i></shortdesc>
    <refbody>
        <section>
            <title>Synopsis:</title>
                <pre scale="80">Notification(title, options)</pre>
        </section>
        <section>
            <title>Parameters:</title>
            <dl>
                <dlentry>
                    <dt><varname>title</varname> {String}</dt>
                    <dd><p>Mandatory. Used as title text in Universal inbox entries.</p></dd>
                </dlentry>
                <dlentry>
                    <dt><varname>options</varname> {Object}</dt>
                    <dd><p>The options object supplies more information needed to create the notification.</p>
                        <dl>
                            <dlentry>
                                <dt><varname>body</varname> {String}</dt>
                                <dd><p>Used as subtitle text in Universal inbox entries.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>tag</varname> {String}</dt>
                                <dd><p>Tag of the notification. If provided, it can be used to close the notification by static method Notification.remove(). Only one notification with the given tag can exist in the UIB. A newly created notification with the same tag will replace the existing notification.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>target</varname> {String}</dt>
                                <dd><p>Target of application that will be launched if the user opens the notification in Universal inbox. This property should match the identifier returned by the invocation framework when the target application registered with the invocation framework. Value is passed on to the Invocation Framework as target. If the user doesn't specify options.target, the identifier of type "Application" of the current application will be used which means the current application will be invoked if the user opens the notification; if there is no valid invocation identifier defined, no application will be invoked.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>targetAction</varname> {String}</dt>
                                <dd><p>Action as registered with invocation framework. Value is passed on to the Invocation Framework as action. If the user doesn't specify options.targetAction, "bb.action.OPEN" will be used.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>payLoad</varname> {String}</dt>
                                <dd><p>Payload to send to the invoked app. Data must be Base64 encoded. Value is passed on to the Invocation Framework as data.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>payLoadURI</varname> {String}</dt>
                                <dd><p>URI to payload data to send to the invoked app. Value is passed on to the Invocation Framework as uri. Example: "file://path/to/file".</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>payLoadType</varname> {String}</dt>
                                <dd><p>The MIME type of URI or payload data to send to the invoked app. Value is passed on to the Invocation Framework as type. Example: "text/plain".</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>onclick</varname> {String}</dt>
                                <dd><p>It is ignored for WebWorks application. Instead, use oninvoked event handler, which will be triggered when the user opens the notification in UIB.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>onshow</varname> {String}</dt>
                                <dd><p>It will be triggered if the notification is created successfully; or onerror callback will be triggered.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>onerror</varname> {String}</dt>
                                <dd><p>It will be triggered if the notification could not be created; or onshow callback will be triggered.</p></dd>
                            </dlentry>
                            <dlentry>
                                <dt><varname>onclose</varname> {String}</dt>
                                <dd><p>It is ignored for WebWorks application as it has no clear usage of it.</p></dd>
                            </dlentry>
                        </dl>
                    </dd>
                </dlentry>
            </dl>
        </section>
        <example>
            <title>Example:</title>
            <pre scale="80">
&lt;script type="text/javascript"&gt;

// Create the simplest notification
  new Notification("You have a simple notification");


  // Create a notification with body
  new Notification("The title", {body: "The body"});


  // Create a notification with events
  var title = "You have a notification";
  var options = {
      body : "Some details",
      onshow : function() { alert("The notification was created successfully!"); },
      onerror : function() { alert("The notification could not be created!"); }
  }
  var n = new Notification(title, options);


  // Create notifications with same tag for a chatroom session
  // Bob says "Hi"
  new Notification("Bob: Hi", { tag: 'chat_Bob' });

  // Bob says "Are you free this afternoon?"
  // as only one notification will exist,
  // the application creates another notification with the combined message using the same tag
  new Notification("Bob: Hi / Are you free this afternoon?", { tag: 'chat_Bob' });


  // Create a notification with invocation information
  // and use invoked event to determine and do something for that notification
  var title = "A notification for something";
  var options = {
      targetAction : "bb.action.DoSomethingForNotification", // If no target is specified, it will invoke the current application
      payloadURI : "some link"
  }

  // Create the notification
  new Notification(title, options);

  // Register to listen to invoked event
  document.addEventListener("invoked", onInvoked);

  // Handle invoked event
  function onInvoked(onInvokedInfo) {
         // Do something if the action is "BB.action.DoSomethingForNotification"
         if(onInvokedInfo.action == "BB.action.DoSomethingForNotification") {
             doSomething(onInvokedInfo.uri); // onInvokedInfo.uri is "some link"
      }
  }


  // Create a notification with invocation information that invokes other application
  var title = "A notification will invoke browser";
  var options = {
      target : "sys.browser",
      targetAction : "bb.action.OPEN",
      payloadType : "text/html",
      payloadURI : "the link"
  }

  // Create the notification
  // and when the user opens the notification item in UIB, it will invoke browser with "the link"
  new Notification(title, options);

&lt;/script&gt;
            </pre>
        </example>
    </refbody>
</reference>
